# Intro to Build Tools
----------------------

1. Introduction
---------------
	Course Overview
	---------------
	4 Lessons
		. Build tools and why we use them.
		. Webpack and its core concepts. --> Very important.
		. Sass with Webpack for more efficient styling. --> Very important.
		. Production and Development setup with Webpack.
		. Introduction to service workers.

	My Teaching
	-----------
		. Nothing beats doing it yourself.
		. Reading documentation is a CODING SUPER POWER.
		. Interview questions.
		. Webpack is a configuration tool, so this course will contain a lot of screencasts.

	Why this course?
	----------------
		. Get really comfortable with build tools.
		. Learn the tools to use on a profesional team.
		. View the whole scope of a frontend project.
		. New phase in your front end development.

	Welcome to part four of the front end development course!
	---------------------------------------------------------
	You have learned to build a webpage with HTML and CSS, and to make it interactive with Javascript. You have all the tools you need to make a fully functional website - and that’s 
	awesome! But you might be asking - where do I go from here? In this course we are going to cover some tools that will take your front end web development skills to a professional 
	level. We will focus on a build tool called Webpack and let it take us on a tour through all the most common technologies and strategies you’ll see in a professional front end 
	project.

	This course is really about a mental shift. Up to this point we have built toy apps for the purpose of learning that typically only have one user - us. But how does our 
	development need to change in order to build, say, a large company website with a whole team of devs? We’re going to explore that and a whole lot more in the coming modules.

	Lesson Objectives
	-----------------
	The prime objectives of this first lesson are:

	1. To set up the context of why we need build-tools for front end development.
	2. To understand how any build tool uses a configuration file where all the app development rules are defined.

	Baseline Questions
	------------------
	Have you ever used build tools in a project?

	Your reflection
	---------------
	Yes.

	Baseline Questions
	------------------
	As you start this course, what is your current understanding of build tools (if any)? What are they? What are they for/what do they do?

	Your reflection
	---------------
	Build tools are pieces of software created for standarizing the development process and their purpose is to help in different task such as bundling files, transpiling code, 
	translating between different versions of JavaScript in order to make the development process more efficient.

	Baseline Questions
	------------------
	As you start this course, what is your current understanding of Webpack (if any)? Feel free to throw out even bits and pieces if you can't think of a full description. Things like 
	where is Webpack used, what it does, other technologies that use it, etc..

	Your reflection	
	---------------
	Webpack is a tool that helps to build a bundled set of files ready for production. I know that this is integrated in some tools used to create react apps, such as npx 
	create-react-app.

	Interview Question
	------------------
	Tell me about one tool you have used that improved your frontend workflow and why. This could be anything from a text editor plugin, linter, time tracker, etc... whatever you l
	ike.

	Your reflection	
	---------------
	I use a lot of extensions in visual studio code, such as Auto Close Tag extension and other tools such as npx create-react-app or Next.js.

	Things to think about
	---------------------
	Good job! Feel free to try these interview questions as often as you want, the more practice the better.

==================================================================================================================================================================

2. Setting the Stage
--------------------
	In this section we are going to talk about why we need build tools for front end projects.

	Go to the Udacity website and inspect element to look at all of the assets on the Udacity home page.

	Pro tip: Don't just open inspector and go to the head tag element to see what's there. One of my favorite browser dev tools is the Network tab. Go there and you can look at all 
	the requests made by the page, separate them by type, see the http request responsible, see the response, etc.. I could do an entire course just on this tab probably. You can 
	learn a ton by taking a look at sites this way and it is a priceless debugging tool.

	On your own
	-----------
	More practice examples.
		. Go to two websites you visit often or like.
		. Inspect their dependency lists just like we did Udacity's website earlier.
		. Take note of any trends, questions, or observations you have while inspecting each.

	Questions
	---------
	What are some of your observations and takeaways from looking at Udacity and the other website assets?

	Your reflection
	---------------
	I see that in professional web apps, there are a lot of different types of files and assets bundled together and I see that the professional websites make a lot of requests to 
	different servers at a time in order to show to the user the information in the browser.

	Quiz Question
	--------------
	Asw/ When loading website styles the order in which each css file is loaded matters

	Interview Question
	------------------
	If a client is complaining that their website load time is too slow, what things would you do to assess where the slowdown is occurring and what might fix the issue?

	Your reflection
	---------------
	It depends of different factors such as the Front-End framework used to create the web app, and other factors. The first thing I would do, could be opening in Google Chrome the 
	web development tools and check wich component is delaying the app, for example if the app was created using React. Another thing I can do could be, checking the Network tab to 
	check if there is something wrong with the reply from the servers.

	Things to think about
	---------------------
	Some good points you would want to hit if asked this question: Use the network tab to look at the overall size of the webpage and if any assets are too big Look at what third 
	party scripts are loading and when Try Google lighthouse audits (if you haven’t heard of it, look it up you’ll love it)

==================================================================================================================================================================

3. Intro To Build Tools
-----------------------
	In this section we are going to talk about some general principles that all build tools have in common, and then introduce how Webpack fits into that role.

	BUILD TOOLS allow developers to AUTOMATE their process for handling WEBSITE ASSETS, saving them lots of time and headache.

	SOME COMMON BUILD TOOLS:
	-----------------------
		. npm.
		. GRUNT --> JS Task Runner.
		. BOWER.
		. YEOMAN.
		. GULP.
		. BRUNCH.
		. WEBPACK --> MODULE BUNDLER. --> Used in React and View.

	Webpack
 	---------> Inside of the create react app build tool.

	Webpack and Other Build Tools
	-----------------------------
		. Webpack is becoming the ubiquitous buid tool
		. Grunt and Gulp are other common options
		. Reasons for learning Webpack are:
			. It is becoming more and more common in professional web development.
			. If you learn it, any other build tool you go to learn will be easy in comparison.

	

	

	




























	































